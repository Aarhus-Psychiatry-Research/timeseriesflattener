{
 "cells": [
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Adding text features\n",
    "\n",
    "So far, the tutorials have dealt with _tabular_ data only. This tutorial will show you to make predictors out of text features, such as clinical notes, within `timeseriesflattener`.\n",
    "\n",
    "Specifically, this tutorial will cover:\n",
    "\n",
    "1. How to generate flattened predictors from already embedded text.\n",
    "2. How to featurize text using Huggingface or sci-kit learn models.\n",
    "3. How to use write your own text embedding function in `timeseriesflattener`.\n",
    "\n",
    "To use the features in this tutorial you'll need to install some extra dependencies. These can be installed by running:\n",
    "```\n",
    "pip install pytorch transformers sentence-transformer\n",
    "```\n",
    "or by installing `timeseriesflattener` with the text dependencies.\n",
    "```\n",
    "pip install timeseriesflattener\"[text]\"\n",
    "```"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## The dataset\n",
    "\n",
    "To start out, let's load a synthetic dataset containing text. As with all other features, each row in the dataset needs an ID, a timestamp, and the feature value. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "from timeseriesflattener.testing.load_synth_data import load_synth_text\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>entity_id</th>\n",
       "      <th>timestamp</th>\n",
       "      <th>value</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>4647</td>\n",
       "      <td>1967-07-19 00:22:00</td>\n",
       "      <td>The patient went into a medically induced coma...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2007</td>\n",
       "      <td>1966-11-25 02:02:00</td>\n",
       "      <td>The patient is taken to the emergency departme...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>5799</td>\n",
       "      <td>1967-09-19 12:31:00</td>\n",
       "      <td>The patient, described as a 7-month old son wh...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1319</td>\n",
       "      <td>1969-07-21 23:16:00</td>\n",
       "      <td>The patient had been left on a bed for 20 minu...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>4234</td>\n",
       "      <td>1966-04-14 22:04:00</td>\n",
       "      <td>The patient had had some severe allergies but ...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   entity_id           timestamp  \\\n",
       "0       4647 1967-07-19 00:22:00   \n",
       "1       2007 1966-11-25 02:02:00   \n",
       "2       5799 1967-09-19 12:31:00   \n",
       "3       1319 1969-07-21 23:16:00   \n",
       "4       4234 1966-04-14 22:04:00   \n",
       "\n",
       "                                               value  \n",
       "0  The patient went into a medically induced coma...  \n",
       "1  The patient is taken to the emergency departme...  \n",
       "2  The patient, described as a 7-month old son wh...  \n",
       "3  The patient had been left on a bed for 20 minu...  \n",
       "4  The patient had had some severe allergies but ...  "
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "synth_text = load_synth_text()\n",
    "synth_text.head()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Generating predictors from embedded text\n",
    "\n",
    "As generating text embeddings can often take a while, it can be an advantageous to embed the text before using `timeseriesflattener` to speed up the computation if you're generating multiple datasets. This first block will show how to convert a dataframe with embeddings into a format that can be passed to `timeseriesflattener`. Skip to [TextPredictorSpec](#textpredictorspec) if you want to perform the embedding step directly in `timeseriesflattener`.\n",
    "\n",
    "To start, let's embed the synthetic text data using a sentence-transformer. You can use any form of text-embedding you want - the only constraint is that the result of the embedding function should be a dataframe with an `entitiy_id_col`, `timestamp_col` and any number of `value_cols`. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "%%capture\n",
    "from sentence_transformers import SentenceTransformer\n",
    "import pandas as pd\n",
    "\n",
    "# load fast model\n",
    "model = SentenceTransformer(\"all-MiniLM-L6-v2\")\n",
    "\n",
    "# define function to embed text and return a dataframe\n",
    "def embed_text_to_df(model: SentenceTransformer, text: list[str]) -> pd.DataFrame:\n",
    "    embeddings = model.encode(text, batch_size=256)\n",
    "    return pd.DataFrame(embeddings)\n",
    "\n",
    "# embed text\n",
    "embedded_text = embed_text_to_df(model=model, text=synth_text[\"value\"].tolist())\n",
    "# drop the text column from the original dataframe\n",
    "metadata_only = synth_text.drop(columns=[\"value\"])\n",
    "# concatenate the metadata and the embedded text\n",
    "embedded_text_with_metadata = pd.concat([metadata_only, embedded_text], axis=1)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>entity_id</th>\n",
       "      <th>timestamp</th>\n",
       "      <th>0</th>\n",
       "      <th>1</th>\n",
       "      <th>2</th>\n",
       "      <th>3</th>\n",
       "      <th>4</th>\n",
       "      <th>5</th>\n",
       "      <th>6</th>\n",
       "      <th>7</th>\n",
       "      <th>...</th>\n",
       "      <th>374</th>\n",
       "      <th>375</th>\n",
       "      <th>376</th>\n",
       "      <th>377</th>\n",
       "      <th>378</th>\n",
       "      <th>379</th>\n",
       "      <th>380</th>\n",
       "      <th>381</th>\n",
       "      <th>382</th>\n",
       "      <th>383</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>4647</td>\n",
       "      <td>1967-07-19 00:22:00</td>\n",
       "      <td>-0.020159</td>\n",
       "      <td>0.006134</td>\n",
       "      <td>-0.006455</td>\n",
       "      <td>0.005938</td>\n",
       "      <td>0.038562</td>\n",
       "      <td>0.005949</td>\n",
       "      <td>-0.056681</td>\n",
       "      <td>0.029464</td>\n",
       "      <td>...</td>\n",
       "      <td>0.021432</td>\n",
       "      <td>0.061494</td>\n",
       "      <td>0.011665</td>\n",
       "      <td>0.018157</td>\n",
       "      <td>-0.035946</td>\n",
       "      <td>0.101041</td>\n",
       "      <td>-0.002912</td>\n",
       "      <td>0.014489</td>\n",
       "      <td>-0.033684</td>\n",
       "      <td>-0.085988</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2007</td>\n",
       "      <td>1966-11-25 02:02:00</td>\n",
       "      <td>-0.065502</td>\n",
       "      <td>0.026975</td>\n",
       "      <td>-0.042235</td>\n",
       "      <td>-0.012499</td>\n",
       "      <td>-0.012820</td>\n",
       "      <td>-0.003107</td>\n",
       "      <td>0.025823</td>\n",
       "      <td>0.115787</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.013681</td>\n",
       "      <td>-0.008509</td>\n",
       "      <td>-0.005801</td>\n",
       "      <td>-0.019228</td>\n",
       "      <td>-0.029137</td>\n",
       "      <td>0.107618</td>\n",
       "      <td>0.027575</td>\n",
       "      <td>0.061189</td>\n",
       "      <td>-0.036197</td>\n",
       "      <td>-0.023715</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>5799</td>\n",
       "      <td>1967-09-19 12:31:00</td>\n",
       "      <td>-0.015965</td>\n",
       "      <td>0.030239</td>\n",
       "      <td>-0.025726</td>\n",
       "      <td>0.011575</td>\n",
       "      <td>-0.056353</td>\n",
       "      <td>0.024950</td>\n",
       "      <td>0.005075</td>\n",
       "      <td>0.158615</td>\n",
       "      <td>...</td>\n",
       "      <td>0.021345</td>\n",
       "      <td>0.019185</td>\n",
       "      <td>0.046376</td>\n",
       "      <td>0.008546</td>\n",
       "      <td>-0.017712</td>\n",
       "      <td>0.014252</td>\n",
       "      <td>-0.090198</td>\n",
       "      <td>0.036281</td>\n",
       "      <td>0.119648</td>\n",
       "      <td>-0.031743</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1319</td>\n",
       "      <td>1969-07-21 23:16:00</td>\n",
       "      <td>0.049595</td>\n",
       "      <td>0.124481</td>\n",
       "      <td>-0.050134</td>\n",
       "      <td>0.036343</td>\n",
       "      <td>0.040793</td>\n",
       "      <td>0.067932</td>\n",
       "      <td>0.108808</td>\n",
       "      <td>0.068143</td>\n",
       "      <td>...</td>\n",
       "      <td>0.041999</td>\n",
       "      <td>-0.011297</td>\n",
       "      <td>0.013209</td>\n",
       "      <td>0.002157</td>\n",
       "      <td>-0.032716</td>\n",
       "      <td>-0.001036</td>\n",
       "      <td>-0.013383</td>\n",
       "      <td>-0.025948</td>\n",
       "      <td>-0.033742</td>\n",
       "      <td>-0.013560</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>4234</td>\n",
       "      <td>1966-04-14 22:04:00</td>\n",
       "      <td>-0.062923</td>\n",
       "      <td>0.062385</td>\n",
       "      <td>-0.048646</td>\n",
       "      <td>0.081368</td>\n",
       "      <td>0.115612</td>\n",
       "      <td>-0.036585</td>\n",
       "      <td>0.105179</td>\n",
       "      <td>0.034068</td>\n",
       "      <td>...</td>\n",
       "      <td>0.015677</td>\n",
       "      <td>-0.009112</td>\n",
       "      <td>-0.032549</td>\n",
       "      <td>0.021608</td>\n",
       "      <td>-0.043334</td>\n",
       "      <td>0.057872</td>\n",
       "      <td>-0.044645</td>\n",
       "      <td>0.024808</td>\n",
       "      <td>0.002562</td>\n",
       "      <td>0.030407</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 386 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   entity_id           timestamp         0         1         2         3  \\\n",
       "0       4647 1967-07-19 00:22:00 -0.020159  0.006134 -0.006455  0.005938   \n",
       "1       2007 1966-11-25 02:02:00 -0.065502  0.026975 -0.042235 -0.012499   \n",
       "2       5799 1967-09-19 12:31:00 -0.015965  0.030239 -0.025726  0.011575   \n",
       "3       1319 1969-07-21 23:16:00  0.049595  0.124481 -0.050134  0.036343   \n",
       "4       4234 1966-04-14 22:04:00 -0.062923  0.062385 -0.048646  0.081368   \n",
       "\n",
       "          4         5         6         7  ...       374       375       376  \\\n",
       "0  0.038562  0.005949 -0.056681  0.029464  ...  0.021432  0.061494  0.011665   \n",
       "1 -0.012820 -0.003107  0.025823  0.115787  ... -0.013681 -0.008509 -0.005801   \n",
       "2 -0.056353  0.024950  0.005075  0.158615  ...  0.021345  0.019185  0.046376   \n",
       "3  0.040793  0.067932  0.108808  0.068143  ...  0.041999 -0.011297  0.013209   \n",
       "4  0.115612 -0.036585  0.105179  0.034068  ...  0.015677 -0.009112 -0.032549   \n",
       "\n",
       "        377       378       379       380       381       382       383  \n",
       "0  0.018157 -0.035946  0.101041 -0.002912  0.014489 -0.033684 -0.085988  \n",
       "1 -0.019228 -0.029137  0.107618  0.027575  0.061189 -0.036197 -0.023715  \n",
       "2  0.008546 -0.017712  0.014252 -0.090198  0.036281  0.119648 -0.031743  \n",
       "3  0.002157 -0.032716 -0.001036 -0.013383 -0.025948 -0.033742 -0.013560  \n",
       "4  0.021608 -0.043334  0.057872 -0.044645  0.024808  0.002562  0.030407  \n",
       "\n",
       "[5 rows x 386 columns]"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "embedded_text_with_metadata.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now that we have our embeddings, we can use the `df_with_multiple_values_to_named_dataframes` function to turn the embeddings into a format that can be readily supplied to `PredictorGroupSpec`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>entity_id</th>\n",
       "      <th>timestamp</th>\n",
       "      <th>value</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>4647</td>\n",
       "      <td>1967-07-19 00:22:00</td>\n",
       "      <td>-0.020159</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2007</td>\n",
       "      <td>1966-11-25 02:02:00</td>\n",
       "      <td>-0.065502</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>5799</td>\n",
       "      <td>1967-09-19 12:31:00</td>\n",
       "      <td>-0.015965</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1319</td>\n",
       "      <td>1969-07-21 23:16:00</td>\n",
       "      <td>0.049595</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>4234</td>\n",
       "      <td>1966-04-14 22:04:00</td>\n",
       "      <td>-0.062923</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   entity_id           timestamp     value\n",
       "0       4647 1967-07-19 00:22:00 -0.020159\n",
       "1       2007 1966-11-25 02:02:00 -0.065502\n",
       "2       5799 1967-09-19 12:31:00 -0.015965\n",
       "3       1319 1969-07-21 23:16:00  0.049595\n",
       "4       4234 1966-04-14 22:04:00 -0.062923"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from timeseriesflattener.df_transforms import (\n",
    "    df_with_multiple_values_to_named_dataframes,\n",
    ")\n",
    "\n",
    "# split the dataframe into a list of named dataframes with one value each\n",
    "embedded_dfs = df_with_multiple_values_to_named_dataframes(\n",
    "    df=embedded_text_with_metadata,\n",
    "    entity_id_col_name=\"entity_id\",\n",
    "    timestamp_col_name=\"timestamp\",\n",
    "    name_prefix=\"sent_emb_\",\n",
    ")\n",
    "\n",
    "# check the first dataframe\n",
    "embedded_dfs[0].df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "384"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# check the number of embeddings/dataframes\n",
    "len(embedded_dfs)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Each dataframe has been named according to `name_prefix` and the column name. This means, that if your column names are informative (e.g. if they correspond to specific words in a BOW model) they will be kept. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'sent_emb_0'"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "embedded_dfs[0].name"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Let's make some features! "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "768\n"
     ]
    }
   ],
   "source": [
    "from timeseriesflattener.aggregation_fns import mean\n",
    "from timeseriesflattener.feature_specs.group_specs import PredictorGroupSpec\n",
    "import numpy as np\n",
    "\n",
    "# create a group spec for the embedded text that will take the mean of each embedding on the column axis\n",
    "# for the last 365 and 730 days\n",
    "emb_spec_batch = PredictorGroupSpec(\n",
    "    named_dataframes=embedded_dfs,\n",
    "    lookbehind_days=[365, 730],\n",
    "    fallback=[np.nan],\n",
    "    aggregation_fns=[mean],\n",
    ").create_combinations()\n",
    "\n",
    "# print the number of features we will create\n",
    "print(len(emb_spec_batch))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We are creating 384*2=768 features: 1 for each embedding for each lookbehind (365 and 730 days)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2023-07-21 14:58:09 [INFO] There were unprocessed specs, computing...\n",
      "2023-07-21 14:58:09 [INFO] Processing 768 temporal features in parallel with 1 workers. Chunksize is 768. If this is above 1, it may take some time for the progress bar to move, as processing is batched. However, this makes for much faster total performance.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...\n",
      "To disable this warning, you can either:\n",
      "\t- Avoid using `tokenizers` before the fork if possible\n",
      "\t- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 768/768 [00:23<00:00, 33.28it/s]\n",
      "2023-07-21 14:58:32 [INFO] Checking alignment of dataframes - this might take a little while (~2 minutes for 1.000 dataframes with 2.000.000 rows).\n",
      "2023-07-21 14:58:33 [INFO] Starting concatenation. Will take some time on performant systems, e.g. 30s for 100 features and 2_000_000 prediction times. This is normal.\n",
      "2023-07-21 14:58:34 [INFO] Concatenation took 1.269 seconds\n",
      "2023-07-21 14:58:34 [INFO] Merging with original df\n"
     ]
    }
   ],
   "source": [
    "# make features how you would normally\n",
    "from timeseriesflattener import TimeseriesFlattener\n",
    "from timeseriesflattener.testing.load_synth_data import load_synth_prediction_times\n",
    "\n",
    "ts_flattener = TimeseriesFlattener(\n",
    "    prediction_times_df=load_synth_prediction_times(),\n",
    "    entity_id_col_name=\"entity_id\",\n",
    "    timestamp_col_name=\"timestamp\",\n",
    "    n_workers=1,\n",
    "    drop_pred_times_with_insufficient_look_distance=False,\n",
    ")\n",
    "ts_flattener.add_spec(emb_spec_batch)\n",
    "df = ts_flattener.get_df()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Let's check the output."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>entity_id</th>\n",
       "      <th>timestamp</th>\n",
       "      <th>prediction_time_uuid</th>\n",
       "      <th>pred_sent_emb_4_within_365_days_mean_fallback_nan</th>\n",
       "      <th>pred_sent_emb_91_within_365_days_mean_fallback_nan</th>\n",
       "      <th>pred_sent_emb_106_within_730_days_mean_fallback_nan</th>\n",
       "      <th>pred_sent_emb_376_within_730_days_mean_fallback_nan</th>\n",
       "      <th>pred_sent_emb_333_within_730_days_mean_fallback_nan</th>\n",
       "      <th>pred_sent_emb_51_within_365_days_mean_fallback_nan</th>\n",
       "      <th>pred_sent_emb_316_within_730_days_mean_fallback_nan</th>\n",
       "      <th>...</th>\n",
       "      <th>pred_sent_emb_217_within_365_days_mean_fallback_nan</th>\n",
       "      <th>pred_sent_emb_288_within_365_days_mean_fallback_nan</th>\n",
       "      <th>pred_sent_emb_67_within_730_days_mean_fallback_nan</th>\n",
       "      <th>pred_sent_emb_120_within_730_days_mean_fallback_nan</th>\n",
       "      <th>pred_sent_emb_221_within_365_days_mean_fallback_nan</th>\n",
       "      <th>pred_sent_emb_26_within_365_days_mean_fallback_nan</th>\n",
       "      <th>pred_sent_emb_137_within_365_days_mean_fallback_nan</th>\n",
       "      <th>pred_sent_emb_11_within_365_days_mean_fallback_nan</th>\n",
       "      <th>pred_sent_emb_205_within_730_days_mean_fallback_nan</th>\n",
       "      <th>pred_sent_emb_357_within_730_days_mean_fallback_nan</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1917</th>\n",
       "      <td>4977</td>\n",
       "      <td>1968-11-28 16:05:00</td>\n",
       "      <td>4977-1968-11-28-16-05-00</td>\n",
       "      <td>0.001232</td>\n",
       "      <td>-0.000302</td>\n",
       "      <td>0.040634</td>\n",
       "      <td>-0.002166</td>\n",
       "      <td>0.039541</td>\n",
       "      <td>0.107663</td>\n",
       "      <td>0.012334</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.036499</td>\n",
       "      <td>0.073914</td>\n",
       "      <td>-0.078592</td>\n",
       "      <td>0.052193</td>\n",
       "      <td>0.013373</td>\n",
       "      <td>-0.069261</td>\n",
       "      <td>-0.088767</td>\n",
       "      <td>0.004150</td>\n",
       "      <td>-0.081158</td>\n",
       "      <td>-0.007002</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2463</th>\n",
       "      <td>6840</td>\n",
       "      <td>1965-11-02 07:17:00</td>\n",
       "      <td>6840-1965-11-02-07-17-00</td>\n",
       "      <td>0.015495</td>\n",
       "      <td>0.010209</td>\n",
       "      <td>-0.006142</td>\n",
       "      <td>0.047095</td>\n",
       "      <td>0.062537</td>\n",
       "      <td>-0.047844</td>\n",
       "      <td>-0.117715</td>\n",
       "      <td>...</td>\n",
       "      <td>0.031768</td>\n",
       "      <td>-0.075292</td>\n",
       "      <td>-0.061927</td>\n",
       "      <td>-0.028022</td>\n",
       "      <td>0.046316</td>\n",
       "      <td>-0.026953</td>\n",
       "      <td>-0.095338</td>\n",
       "      <td>0.002313</td>\n",
       "      <td>0.056995</td>\n",
       "      <td>0.015441</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2580</th>\n",
       "      <td>18</td>\n",
       "      <td>1968-08-26 15:19:00</td>\n",
       "      <td>18-1968-08-26-15-19-00</td>\n",
       "      <td>-0.025853</td>\n",
       "      <td>0.049886</td>\n",
       "      <td>-0.060344</td>\n",
       "      <td>0.054533</td>\n",
       "      <td>0.013257</td>\n",
       "      <td>-0.022677</td>\n",
       "      <td>-0.021626</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.013668</td>\n",
       "      <td>-0.024832</td>\n",
       "      <td>-0.086064</td>\n",
       "      <td>0.004718</td>\n",
       "      <td>0.020128</td>\n",
       "      <td>0.004320</td>\n",
       "      <td>-0.078148</td>\n",
       "      <td>0.016352</td>\n",
       "      <td>-0.011881</td>\n",
       "      <td>-0.061026</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2741</th>\n",
       "      <td>9832</td>\n",
       "      <td>1969-06-03 04:36:00</td>\n",
       "      <td>9832-1969-06-03-04-36-00</td>\n",
       "      <td>-0.047658</td>\n",
       "      <td>0.103156</td>\n",
       "      <td>0.049586</td>\n",
       "      <td>0.012266</td>\n",
       "      <td>-0.051270</td>\n",
       "      <td>-0.056747</td>\n",
       "      <td>-0.047248</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.015452</td>\n",
       "      <td>0.011051</td>\n",
       "      <td>-0.108515</td>\n",
       "      <td>-0.033745</td>\n",
       "      <td>-0.037524</td>\n",
       "      <td>0.009744</td>\n",
       "      <td>-0.045512</td>\n",
       "      <td>0.091745</td>\n",
       "      <td>0.012856</td>\n",
       "      <td>-0.013721</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2931</th>\n",
       "      <td>7281</td>\n",
       "      <td>1967-06-05 00:41:00</td>\n",
       "      <td>7281-1967-06-05-00-41-00</td>\n",
       "      <td>-0.027302</td>\n",
       "      <td>-0.031607</td>\n",
       "      <td>0.009704</td>\n",
       "      <td>0.059126</td>\n",
       "      <td>-0.036862</td>\n",
       "      <td>-0.098369</td>\n",
       "      <td>-0.026895</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.038409</td>\n",
       "      <td>0.015281</td>\n",
       "      <td>-0.071394</td>\n",
       "      <td>0.010426</td>\n",
       "      <td>-0.055521</td>\n",
       "      <td>0.071217</td>\n",
       "      <td>-0.029075</td>\n",
       "      <td>-0.037698</td>\n",
       "      <td>-0.063065</td>\n",
       "      <td>0.068621</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 771 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      entity_id           timestamp      prediction_time_uuid  \\\n",
       "1917       4977 1968-11-28 16:05:00  4977-1968-11-28-16-05-00   \n",
       "2463       6840 1965-11-02 07:17:00  6840-1965-11-02-07-17-00   \n",
       "2580         18 1968-08-26 15:19:00    18-1968-08-26-15-19-00   \n",
       "2741       9832 1969-06-03 04:36:00  9832-1969-06-03-04-36-00   \n",
       "2931       7281 1967-06-05 00:41:00  7281-1967-06-05-00-41-00   \n",
       "\n",
       "      pred_sent_emb_4_within_365_days_mean_fallback_nan  \\\n",
       "1917                                           0.001232   \n",
       "2463                                           0.015495   \n",
       "2580                                          -0.025853   \n",
       "2741                                          -0.047658   \n",
       "2931                                          -0.027302   \n",
       "\n",
       "      pred_sent_emb_91_within_365_days_mean_fallback_nan  \\\n",
       "1917                                          -0.000302    \n",
       "2463                                           0.010209    \n",
       "2580                                           0.049886    \n",
       "2741                                           0.103156    \n",
       "2931                                          -0.031607    \n",
       "\n",
       "      pred_sent_emb_106_within_730_days_mean_fallback_nan  \\\n",
       "1917                                           0.040634     \n",
       "2463                                          -0.006142     \n",
       "2580                                          -0.060344     \n",
       "2741                                           0.049586     \n",
       "2931                                           0.009704     \n",
       "\n",
       "      pred_sent_emb_376_within_730_days_mean_fallback_nan  \\\n",
       "1917                                          -0.002166     \n",
       "2463                                           0.047095     \n",
       "2580                                           0.054533     \n",
       "2741                                           0.012266     \n",
       "2931                                           0.059126     \n",
       "\n",
       "      pred_sent_emb_333_within_730_days_mean_fallback_nan  \\\n",
       "1917                                           0.039541     \n",
       "2463                                           0.062537     \n",
       "2580                                           0.013257     \n",
       "2741                                          -0.051270     \n",
       "2931                                          -0.036862     \n",
       "\n",
       "      pred_sent_emb_51_within_365_days_mean_fallback_nan  \\\n",
       "1917                                           0.107663    \n",
       "2463                                          -0.047844    \n",
       "2580                                          -0.022677    \n",
       "2741                                          -0.056747    \n",
       "2931                                          -0.098369    \n",
       "\n",
       "      pred_sent_emb_316_within_730_days_mean_fallback_nan  ...  \\\n",
       "1917                                           0.012334    ...   \n",
       "2463                                          -0.117715    ...   \n",
       "2580                                          -0.021626    ...   \n",
       "2741                                          -0.047248    ...   \n",
       "2931                                          -0.026895    ...   \n",
       "\n",
       "      pred_sent_emb_217_within_365_days_mean_fallback_nan  \\\n",
       "1917                                          -0.036499     \n",
       "2463                                           0.031768     \n",
       "2580                                          -0.013668     \n",
       "2741                                          -0.015452     \n",
       "2931                                          -0.038409     \n",
       "\n",
       "      pred_sent_emb_288_within_365_days_mean_fallback_nan  \\\n",
       "1917                                           0.073914     \n",
       "2463                                          -0.075292     \n",
       "2580                                          -0.024832     \n",
       "2741                                           0.011051     \n",
       "2931                                           0.015281     \n",
       "\n",
       "      pred_sent_emb_67_within_730_days_mean_fallback_nan  \\\n",
       "1917                                          -0.078592    \n",
       "2463                                          -0.061927    \n",
       "2580                                          -0.086064    \n",
       "2741                                          -0.108515    \n",
       "2931                                          -0.071394    \n",
       "\n",
       "      pred_sent_emb_120_within_730_days_mean_fallback_nan  \\\n",
       "1917                                           0.052193     \n",
       "2463                                          -0.028022     \n",
       "2580                                           0.004718     \n",
       "2741                                          -0.033745     \n",
       "2931                                           0.010426     \n",
       "\n",
       "      pred_sent_emb_221_within_365_days_mean_fallback_nan  \\\n",
       "1917                                           0.013373     \n",
       "2463                                           0.046316     \n",
       "2580                                           0.020128     \n",
       "2741                                          -0.037524     \n",
       "2931                                          -0.055521     \n",
       "\n",
       "      pred_sent_emb_26_within_365_days_mean_fallback_nan  \\\n",
       "1917                                          -0.069261    \n",
       "2463                                          -0.026953    \n",
       "2580                                           0.004320    \n",
       "2741                                           0.009744    \n",
       "2931                                           0.071217    \n",
       "\n",
       "      pred_sent_emb_137_within_365_days_mean_fallback_nan  \\\n",
       "1917                                          -0.088767     \n",
       "2463                                          -0.095338     \n",
       "2580                                          -0.078148     \n",
       "2741                                          -0.045512     \n",
       "2931                                          -0.029075     \n",
       "\n",
       "      pred_sent_emb_11_within_365_days_mean_fallback_nan  \\\n",
       "1917                                           0.004150    \n",
       "2463                                           0.002313    \n",
       "2580                                           0.016352    \n",
       "2741                                           0.091745    \n",
       "2931                                          -0.037698    \n",
       "\n",
       "      pred_sent_emb_205_within_730_days_mean_fallback_nan  \\\n",
       "1917                                          -0.081158     \n",
       "2463                                           0.056995     \n",
       "2580                                          -0.011881     \n",
       "2741                                           0.012856     \n",
       "2931                                          -0.063065     \n",
       "\n",
       "      pred_sent_emb_357_within_730_days_mean_fallback_nan  \n",
       "1917                                          -0.007002    \n",
       "2463                                           0.015441    \n",
       "2580                                          -0.061026    \n",
       "2741                                          -0.013721    \n",
       "2931                                           0.068621    \n",
       "\n",
       "[5 rows x 771 columns]"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# dropping na values (no embeddings within the lookbehind period) for the sake of this example\n",
    "df.dropna().head()"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## TextPredictorSpec\n",
    "The main difference when specifying text predictors compared to tabular predictors is the `Spec` you define. When working directly with text, we need to specify a `TextPredictorSpec` which is entirely similar to the `PredictorSpec` except for two additional attributes: `embedding_fn` and `embedding_fn_kwargs`.\n",
    "\n",
    "`embedding_fn` should be a callable that takes a pandas Series containing text and converts it to a pandas DataFrame with a column for each feature. `embedding_fn_kwargs` are simply optional keyword arguments that will be passed to the embedding function, such as a Huggingface model name.\n",
    "\n",
    "Not all `resolve_multiple_fn` are meaningful for text, as we can't do numerical operations on text. Instead, `TextPredictorSpec` defaults to the \"concatenate\" option, which simply concatenates all texts within the lookbehind within. Other options that work for text are \"latest\" and \"earliest\". \n"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Featurization using sentence-transformers\n",
    "Let's specify a `TextPredictorSpec` using a [sentence-transformers](https://www.sbert.net/) model. `timeseriesflattener` includes functions that make it easy to featurize text using either sentence-transformers or any text model from the [Huggingface Hub](https://huggingface.co/). \n",
    "\n",
    "The `sentence_transformers_embedding` function is recommended for sentence-transformers. If you want to another type of model from the Huggingface Hub we recommend using the `huggingface_embedding` function which has the same interface as `sentence_transformers_embedding`.\n",
    "\n",
    "Notice, both `huggingface_embedding` and `sentence_transformers_embedding` will truncate the input to the maximum sequence length allowed by the model. If you want to use Huggingface embeddings for larger blocks of text, either use the `sklearn_embedding` function or write your own embedding function (see below)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "from timeseriesflattener.text_embedding_functions import (\n",
    "    sentence_transformers_embedding,\n",
    "    huggingface_embedding,\n",
    ")\n",
    "from timeseriesflattener import TextPredictorSpec\n",
    "from timeseriesflattener.aggregation_fns import concatenate\n",
    "import numpy as np"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "text_spec = TextPredictorSpec(\n",
    "    timeseries_df=load_synth_text(),\n",
    "    lookbehind_days=730,\n",
    "    fallback=np.nan,\n",
    "    aggregation_fn=concatenate,\n",
    "    feature_base_name=\"text-st\",\n",
    "    embedding_fn=sentence_transformers_embedding,\n",
    "    embedding_fn_kwargs={\n",
    "        \"model_name\": \"sentence-transformers/all-MiniLM-L6-v2\"\n",
    "    },\n",
    ")"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "That's it. Let's make our features in the usual way."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [],
   "source": [
    "ts_flattener = TimeseriesFlattener(\n",
    "    prediction_times_df=load_synth_prediction_times(),\n",
    "    entity_id_col_name=\"entity_id\",\n",
    "    timestamp_col_name=\"timestamp\",\n",
    "    n_workers=1,\n",
    "    drop_pred_times_with_insufficient_look_distance=False,\n",
    ")\n",
    "ts_flattener.add_spec(text_spec)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2023-07-21 14:58:34 [INFO] There were unprocessed specs, computing...\n",
      "2023-07-21 14:58:34 [INFO] Processing 1 temporal features in parallel with 1 workers. Chunksize is 1. If this is above 1, it may take some time for the progress bar to move, as processing is batched. However, this makes for much faster total performance.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...\n",
      "To disable this warning, you can either:\n",
      "\t- Avoid using `tokenizers` before the fork if possible\n",
      "\t- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 1/1 [00:05<00:00,  5.12s/it]\n",
      "2023-07-21 14:58:39 [INFO] Checking alignment of dataframes - this might take a little while (~2 minutes for 1.000 dataframes with 2.000.000 rows).\n",
      "2023-07-21 14:58:39 [INFO] Starting concatenation. Will take some time on performant systems, e.g. 30s for 100 features and 2_000_000 prediction times. This is normal.\n",
      "2023-07-21 14:58:40 [INFO] Concatenation took 0.024 seconds\n",
      "2023-07-21 14:58:40 [INFO] Merging with original df\n"
     ]
    }
   ],
   "source": [
    "df = ts_flattener.get_df()\n"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Let's check the features."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>entity_id</th>\n",
       "      <th>timestamp</th>\n",
       "      <th>prediction_time_uuid</th>\n",
       "      <th>pred_text-st-0_within_730_days_concatenate_fallback_nan</th>\n",
       "      <th>pred_text-st-1_within_730_days_concatenate_fallback_nan</th>\n",
       "      <th>pred_text-st-2_within_730_days_concatenate_fallback_nan</th>\n",
       "      <th>pred_text-st-3_within_730_days_concatenate_fallback_nan</th>\n",
       "      <th>pred_text-st-4_within_730_days_concatenate_fallback_nan</th>\n",
       "      <th>pred_text-st-5_within_730_days_concatenate_fallback_nan</th>\n",
       "      <th>pred_text-st-6_within_730_days_concatenate_fallback_nan</th>\n",
       "      <th>...</th>\n",
       "      <th>pred_text-st-374_within_730_days_concatenate_fallback_nan</th>\n",
       "      <th>pred_text-st-375_within_730_days_concatenate_fallback_nan</th>\n",
       "      <th>pred_text-st-376_within_730_days_concatenate_fallback_nan</th>\n",
       "      <th>pred_text-st-377_within_730_days_concatenate_fallback_nan</th>\n",
       "      <th>pred_text-st-378_within_730_days_concatenate_fallback_nan</th>\n",
       "      <th>pred_text-st-379_within_730_days_concatenate_fallback_nan</th>\n",
       "      <th>pred_text-st-380_within_730_days_concatenate_fallback_nan</th>\n",
       "      <th>pred_text-st-381_within_730_days_concatenate_fallback_nan</th>\n",
       "      <th>pred_text-st-382_within_730_days_concatenate_fallback_nan</th>\n",
       "      <th>pred_text-st-383_within_730_days_concatenate_fallback_nan</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>9903</td>\n",
       "      <td>1968-05-09 21:24:00</td>\n",
       "      <td>9903-1968-05-09-21-24-00</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>7465</td>\n",
       "      <td>1966-05-24 01:23:00</td>\n",
       "      <td>7465-1966-05-24-01-23-00</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>6447</td>\n",
       "      <td>1967-09-25 18:08:00</td>\n",
       "      <td>6447-1967-09-25-18-08-00</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2121</td>\n",
       "      <td>1966-05-05 20:52:00</td>\n",
       "      <td>2121-1966-05-05-20-52-00</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>4927</td>\n",
       "      <td>1968-06-30 12:13:00</td>\n",
       "      <td>4927-1968-06-30-12-13-00</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 387 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   entity_id           timestamp      prediction_time_uuid  \\\n",
       "0       9903 1968-05-09 21:24:00  9903-1968-05-09-21-24-00   \n",
       "1       7465 1966-05-24 01:23:00  7465-1966-05-24-01-23-00   \n",
       "2       6447 1967-09-25 18:08:00  6447-1967-09-25-18-08-00   \n",
       "3       2121 1966-05-05 20:52:00  2121-1966-05-05-20-52-00   \n",
       "4       4927 1968-06-30 12:13:00  4927-1968-06-30-12-13-00   \n",
       "\n",
       "   pred_text-st-0_within_730_days_concatenate_fallback_nan  \\\n",
       "0                                                NaN         \n",
       "1                                                NaN         \n",
       "2                                                NaN         \n",
       "3                                                NaN         \n",
       "4                                                NaN         \n",
       "\n",
       "   pred_text-st-1_within_730_days_concatenate_fallback_nan  \\\n",
       "0                                                NaN         \n",
       "1                                                NaN         \n",
       "2                                                NaN         \n",
       "3                                                NaN         \n",
       "4                                                NaN         \n",
       "\n",
       "   pred_text-st-2_within_730_days_concatenate_fallback_nan  \\\n",
       "0                                                NaN         \n",
       "1                                                NaN         \n",
       "2                                                NaN         \n",
       "3                                                NaN         \n",
       "4                                                NaN         \n",
       "\n",
       "   pred_text-st-3_within_730_days_concatenate_fallback_nan  \\\n",
       "0                                                NaN         \n",
       "1                                                NaN         \n",
       "2                                                NaN         \n",
       "3                                                NaN         \n",
       "4                                                NaN         \n",
       "\n",
       "   pred_text-st-4_within_730_days_concatenate_fallback_nan  \\\n",
       "0                                                NaN         \n",
       "1                                                NaN         \n",
       "2                                                NaN         \n",
       "3                                                NaN         \n",
       "4                                                NaN         \n",
       "\n",
       "   pred_text-st-5_within_730_days_concatenate_fallback_nan  \\\n",
       "0                                                NaN         \n",
       "1                                                NaN         \n",
       "2                                                NaN         \n",
       "3                                                NaN         \n",
       "4                                                NaN         \n",
       "\n",
       "   pred_text-st-6_within_730_days_concatenate_fallback_nan  ...  \\\n",
       "0                                                NaN        ...   \n",
       "1                                                NaN        ...   \n",
       "2                                                NaN        ...   \n",
       "3                                                NaN        ...   \n",
       "4                                                NaN        ...   \n",
       "\n",
       "   pred_text-st-374_within_730_days_concatenate_fallback_nan  \\\n",
       "0                                                NaN           \n",
       "1                                                NaN           \n",
       "2                                                NaN           \n",
       "3                                                NaN           \n",
       "4                                                NaN           \n",
       "\n",
       "   pred_text-st-375_within_730_days_concatenate_fallback_nan  \\\n",
       "0                                                NaN           \n",
       "1                                                NaN           \n",
       "2                                                NaN           \n",
       "3                                                NaN           \n",
       "4                                                NaN           \n",
       "\n",
       "   pred_text-st-376_within_730_days_concatenate_fallback_nan  \\\n",
       "0                                                NaN           \n",
       "1                                                NaN           \n",
       "2                                                NaN           \n",
       "3                                                NaN           \n",
       "4                                                NaN           \n",
       "\n",
       "   pred_text-st-377_within_730_days_concatenate_fallback_nan  \\\n",
       "0                                                NaN           \n",
       "1                                                NaN           \n",
       "2                                                NaN           \n",
       "3                                                NaN           \n",
       "4                                                NaN           \n",
       "\n",
       "   pred_text-st-378_within_730_days_concatenate_fallback_nan  \\\n",
       "0                                                NaN           \n",
       "1                                                NaN           \n",
       "2                                                NaN           \n",
       "3                                                NaN           \n",
       "4                                                NaN           \n",
       "\n",
       "   pred_text-st-379_within_730_days_concatenate_fallback_nan  \\\n",
       "0                                                NaN           \n",
       "1                                                NaN           \n",
       "2                                                NaN           \n",
       "3                                                NaN           \n",
       "4                                                NaN           \n",
       "\n",
       "   pred_text-st-380_within_730_days_concatenate_fallback_nan  \\\n",
       "0                                                NaN           \n",
       "1                                                NaN           \n",
       "2                                                NaN           \n",
       "3                                                NaN           \n",
       "4                                                NaN           \n",
       "\n",
       "   pred_text-st-381_within_730_days_concatenate_fallback_nan  \\\n",
       "0                                                NaN           \n",
       "1                                                NaN           \n",
       "2                                                NaN           \n",
       "3                                                NaN           \n",
       "4                                                NaN           \n",
       "\n",
       "   pred_text-st-382_within_730_days_concatenate_fallback_nan  \\\n",
       "0                                                NaN           \n",
       "1                                                NaN           \n",
       "2                                                NaN           \n",
       "3                                                NaN           \n",
       "4                                                NaN           \n",
       "\n",
       "   pred_text-st-383_within_730_days_concatenate_fallback_nan  \n",
       "0                                                NaN          \n",
       "1                                                NaN          \n",
       "2                                                NaN          \n",
       "3                                                NaN          \n",
       "4                                                NaN          \n",
       "\n",
       "[5 rows x 387 columns]"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head()\n"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Because the synthetic text data is much smaller than the prediction times data, there are a lot of NaNs. Let's subset to only see the prediction times that actually include text."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>entity_id</th>\n",
       "      <th>timestamp</th>\n",
       "      <th>prediction_time_uuid</th>\n",
       "      <th>pred_text-st-0_within_730_days_concatenate_fallback_nan</th>\n",
       "      <th>pred_text-st-1_within_730_days_concatenate_fallback_nan</th>\n",
       "      <th>pred_text-st-2_within_730_days_concatenate_fallback_nan</th>\n",
       "      <th>pred_text-st-3_within_730_days_concatenate_fallback_nan</th>\n",
       "      <th>pred_text-st-4_within_730_days_concatenate_fallback_nan</th>\n",
       "      <th>pred_text-st-5_within_730_days_concatenate_fallback_nan</th>\n",
       "      <th>pred_text-st-6_within_730_days_concatenate_fallback_nan</th>\n",
       "      <th>...</th>\n",
       "      <th>pred_text-st-374_within_730_days_concatenate_fallback_nan</th>\n",
       "      <th>pred_text-st-375_within_730_days_concatenate_fallback_nan</th>\n",
       "      <th>pred_text-st-376_within_730_days_concatenate_fallback_nan</th>\n",
       "      <th>pred_text-st-377_within_730_days_concatenate_fallback_nan</th>\n",
       "      <th>pred_text-st-378_within_730_days_concatenate_fallback_nan</th>\n",
       "      <th>pred_text-st-379_within_730_days_concatenate_fallback_nan</th>\n",
       "      <th>pred_text-st-380_within_730_days_concatenate_fallback_nan</th>\n",
       "      <th>pred_text-st-381_within_730_days_concatenate_fallback_nan</th>\n",
       "      <th>pred_text-st-382_within_730_days_concatenate_fallback_nan</th>\n",
       "      <th>pred_text-st-383_within_730_days_concatenate_fallback_nan</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>244</th>\n",
       "      <td>7337</td>\n",
       "      <td>1966-06-28 10:34:00</td>\n",
       "      <td>7337-1966-06-28-10-34-00</td>\n",
       "      <td>-0.032579</td>\n",
       "      <td>0.117177</td>\n",
       "      <td>-0.049458</td>\n",
       "      <td>0.009333</td>\n",
       "      <td>0.013606</td>\n",
       "      <td>0.021374</td>\n",
       "      <td>0.001354</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.017522</td>\n",
       "      <td>0.099060</td>\n",
       "      <td>0.049743</td>\n",
       "      <td>0.015571</td>\n",
       "      <td>-0.019073</td>\n",
       "      <td>0.109147</td>\n",
       "      <td>0.047269</td>\n",
       "      <td>-0.043760</td>\n",
       "      <td>0.020477</td>\n",
       "      <td>-0.007479</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>755</th>\n",
       "      <td>8951</td>\n",
       "      <td>1969-12-22 16:32:00</td>\n",
       "      <td>8951-1969-12-22-16-32-00</td>\n",
       "      <td>-0.011282</td>\n",
       "      <td>0.002961</td>\n",
       "      <td>0.025957</td>\n",
       "      <td>-0.015063</td>\n",
       "      <td>-0.050311</td>\n",
       "      <td>0.048773</td>\n",
       "      <td>-0.002749</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.067139</td>\n",
       "      <td>0.049532</td>\n",
       "      <td>-0.030149</td>\n",
       "      <td>-0.009194</td>\n",
       "      <td>-0.051574</td>\n",
       "      <td>0.013600</td>\n",
       "      <td>-0.100028</td>\n",
       "      <td>-0.116557</td>\n",
       "      <td>0.033871</td>\n",
       "      <td>0.008424</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>896</th>\n",
       "      <td>2007</td>\n",
       "      <td>1968-10-15 14:12:00</td>\n",
       "      <td>2007-1968-10-15-14-12-00</td>\n",
       "      <td>-0.065502</td>\n",
       "      <td>0.026975</td>\n",
       "      <td>-0.042235</td>\n",
       "      <td>-0.012499</td>\n",
       "      <td>-0.012820</td>\n",
       "      <td>-0.003107</td>\n",
       "      <td>0.025823</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.013681</td>\n",
       "      <td>-0.008509</td>\n",
       "      <td>-0.005801</td>\n",
       "      <td>-0.019228</td>\n",
       "      <td>-0.029137</td>\n",
       "      <td>0.107618</td>\n",
       "      <td>0.027575</td>\n",
       "      <td>0.061189</td>\n",
       "      <td>-0.036197</td>\n",
       "      <td>-0.023715</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1517</th>\n",
       "      <td>1728</td>\n",
       "      <td>1968-05-29 12:27:00</td>\n",
       "      <td>1728-1968-05-29-12-27-00</td>\n",
       "      <td>0.003414</td>\n",
       "      <td>-0.022889</td>\n",
       "      <td>0.003017</td>\n",
       "      <td>0.036401</td>\n",
       "      <td>0.021559</td>\n",
       "      <td>-0.004627</td>\n",
       "      <td>0.070992</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.010578</td>\n",
       "      <td>0.028139</td>\n",
       "      <td>-0.013348</td>\n",
       "      <td>-0.062894</td>\n",
       "      <td>-0.059819</td>\n",
       "      <td>-0.064517</td>\n",
       "      <td>0.013139</td>\n",
       "      <td>-0.030818</td>\n",
       "      <td>0.088636</td>\n",
       "      <td>0.012063</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1917</th>\n",
       "      <td>4977</td>\n",
       "      <td>1968-11-28 16:05:00</td>\n",
       "      <td>4977-1968-11-28-16-05-00</td>\n",
       "      <td>0.029870</td>\n",
       "      <td>0.059029</td>\n",
       "      <td>0.025774</td>\n",
       "      <td>0.065304</td>\n",
       "      <td>0.001232</td>\n",
       "      <td>0.097216</td>\n",
       "      <td>0.005217</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.078040</td>\n",
       "      <td>0.121744</td>\n",
       "      <td>-0.002166</td>\n",
       "      <td>0.040929</td>\n",
       "      <td>-0.075126</td>\n",
       "      <td>-0.069748</td>\n",
       "      <td>0.009481</td>\n",
       "      <td>0.039800</td>\n",
       "      <td>0.010281</td>\n",
       "      <td>0.028113</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 387 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      entity_id           timestamp      prediction_time_uuid  \\\n",
       "244        7337 1966-06-28 10:34:00  7337-1966-06-28-10-34-00   \n",
       "755        8951 1969-12-22 16:32:00  8951-1969-12-22-16-32-00   \n",
       "896        2007 1968-10-15 14:12:00  2007-1968-10-15-14-12-00   \n",
       "1517       1728 1968-05-29 12:27:00  1728-1968-05-29-12-27-00   \n",
       "1917       4977 1968-11-28 16:05:00  4977-1968-11-28-16-05-00   \n",
       "\n",
       "      pred_text-st-0_within_730_days_concatenate_fallback_nan  \\\n",
       "244                                           -0.032579         \n",
       "755                                           -0.011282         \n",
       "896                                           -0.065502         \n",
       "1517                                           0.003414         \n",
       "1917                                           0.029870         \n",
       "\n",
       "      pred_text-st-1_within_730_days_concatenate_fallback_nan  \\\n",
       "244                                            0.117177         \n",
       "755                                            0.002961         \n",
       "896                                            0.026975         \n",
       "1517                                          -0.022889         \n",
       "1917                                           0.059029         \n",
       "\n",
       "      pred_text-st-2_within_730_days_concatenate_fallback_nan  \\\n",
       "244                                           -0.049458         \n",
       "755                                            0.025957         \n",
       "896                                           -0.042235         \n",
       "1517                                           0.003017         \n",
       "1917                                           0.025774         \n",
       "\n",
       "      pred_text-st-3_within_730_days_concatenate_fallback_nan  \\\n",
       "244                                            0.009333         \n",
       "755                                           -0.015063         \n",
       "896                                           -0.012499         \n",
       "1517                                           0.036401         \n",
       "1917                                           0.065304         \n",
       "\n",
       "      pred_text-st-4_within_730_days_concatenate_fallback_nan  \\\n",
       "244                                            0.013606         \n",
       "755                                           -0.050311         \n",
       "896                                           -0.012820         \n",
       "1517                                           0.021559         \n",
       "1917                                           0.001232         \n",
       "\n",
       "      pred_text-st-5_within_730_days_concatenate_fallback_nan  \\\n",
       "244                                            0.021374         \n",
       "755                                            0.048773         \n",
       "896                                           -0.003107         \n",
       "1517                                          -0.004627         \n",
       "1917                                           0.097216         \n",
       "\n",
       "      pred_text-st-6_within_730_days_concatenate_fallback_nan  ...  \\\n",
       "244                                            0.001354        ...   \n",
       "755                                           -0.002749        ...   \n",
       "896                                            0.025823        ...   \n",
       "1517                                           0.070992        ...   \n",
       "1917                                           0.005217        ...   \n",
       "\n",
       "      pred_text-st-374_within_730_days_concatenate_fallback_nan  \\\n",
       "244                                           -0.017522           \n",
       "755                                           -0.067139           \n",
       "896                                           -0.013681           \n",
       "1517                                          -0.010578           \n",
       "1917                                          -0.078040           \n",
       "\n",
       "      pred_text-st-375_within_730_days_concatenate_fallback_nan  \\\n",
       "244                                            0.099060           \n",
       "755                                            0.049532           \n",
       "896                                           -0.008509           \n",
       "1517                                           0.028139           \n",
       "1917                                           0.121744           \n",
       "\n",
       "      pred_text-st-376_within_730_days_concatenate_fallback_nan  \\\n",
       "244                                            0.049743           \n",
       "755                                           -0.030149           \n",
       "896                                           -0.005801           \n",
       "1517                                          -0.013348           \n",
       "1917                                          -0.002166           \n",
       "\n",
       "      pred_text-st-377_within_730_days_concatenate_fallback_nan  \\\n",
       "244                                            0.015571           \n",
       "755                                           -0.009194           \n",
       "896                                           -0.019228           \n",
       "1517                                          -0.062894           \n",
       "1917                                           0.040929           \n",
       "\n",
       "      pred_text-st-378_within_730_days_concatenate_fallback_nan  \\\n",
       "244                                           -0.019073           \n",
       "755                                           -0.051574           \n",
       "896                                           -0.029137           \n",
       "1517                                          -0.059819           \n",
       "1917                                          -0.075126           \n",
       "\n",
       "      pred_text-st-379_within_730_days_concatenate_fallback_nan  \\\n",
       "244                                            0.109147           \n",
       "755                                            0.013600           \n",
       "896                                            0.107618           \n",
       "1517                                          -0.064517           \n",
       "1917                                          -0.069748           \n",
       "\n",
       "      pred_text-st-380_within_730_days_concatenate_fallback_nan  \\\n",
       "244                                            0.047269           \n",
       "755                                           -0.100028           \n",
       "896                                            0.027575           \n",
       "1517                                           0.013139           \n",
       "1917                                           0.009481           \n",
       "\n",
       "      pred_text-st-381_within_730_days_concatenate_fallback_nan  \\\n",
       "244                                           -0.043760           \n",
       "755                                           -0.116557           \n",
       "896                                            0.061189           \n",
       "1517                                          -0.030818           \n",
       "1917                                           0.039800           \n",
       "\n",
       "      pred_text-st-382_within_730_days_concatenate_fallback_nan  \\\n",
       "244                                            0.020477           \n",
       "755                                            0.033871           \n",
       "896                                           -0.036197           \n",
       "1517                                           0.088636           \n",
       "1917                                           0.010281           \n",
       "\n",
       "      pred_text-st-383_within_730_days_concatenate_fallback_nan  \n",
       "244                                           -0.007479          \n",
       "755                                            0.008424          \n",
       "896                                           -0.023715          \n",
       "1517                                           0.012063          \n",
       "1917                                           0.028113          \n",
       "\n",
       "[5 rows x 387 columns]"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_pred_times_with_text = df[\n",
    "    ~df[\"pred_text-st-1_within_730_days_concatenate_fallback_nan\"].isna()\n",
    "]\n",
    "df_pred_times_with_text.head()"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Featurization using sklearn models\n",
    "\n",
    "If you want to embed your model using an sklearn model using e.g. TF-IDF, this can also be easily accomplished. First, you should train the sklearn model (e.g. `TfidfVectorizer`) on your dataset (using the `.fit` method). \n",
    "\n",
    "Now, to use your trained model in `timeseriesflattener`, simply use the `sklearn_embedding` function and supply the model as an embedding function keyword argument. \n",
    "\n",
    "In the following example we will use a simple CountVectorizer model, which has been pretrained on the synthetic data, to create the predictors."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/au554730/Desktop/Projects/timeseriesflattener/.venv/lib/python3.10/site-packages/sklearn/base.py:299: UserWarning: Trying to unpickle estimator CountVectorizer from version 1.1.2 when using version 1.2.1. This might lead to breaking code or invalid results. Use at your own risk. For more info please refer to:\n",
      "https://scikit-learn.org/stable/model_persistence.html#security-maintainability-limitations\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<style>#sk-container-id-1 {color: black;background-color: white;}#sk-container-id-1 pre{padding: 0;}#sk-container-id-1 div.sk-toggleable {background-color: white;}#sk-container-id-1 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-1 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-1 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-1 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-1 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-1 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-1 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-1 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-1 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-1 div.sk-item {position: relative;z-index: 1;}#sk-container-id-1 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-1 div.sk-item::before, #sk-container-id-1 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-1 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-1 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-1 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-1 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-1 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-1 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-1 div.sk-label-container {text-align: center;}#sk-container-id-1 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-1 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>CountVectorizer(max_features=10)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">CountVectorizer</label><div class=\"sk-toggleable__content\"><pre>CountVectorizer(max_features=10)</pre></div></div></div></div></div>"
      ],
      "text/plain": [
       "CountVectorizer(max_features=10)"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from timeseriesflattener.text_embedding_functions import sklearn_embedding\n",
    "from timeseriesflattener.testing.text_embedding_functions import _load_bow_model\n",
    "\n",
    "tfidf_model = _load_bow_model()\n",
    "tfidf_model\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [],
   "source": [
    "count_vectorizer_text_spec = TextPredictorSpec(\n",
    "    timeseries_df=load_synth_text(),\n",
    "    lookbehind_days=730,\n",
    "    fallback=np.nan,\n",
    "    aggregation_fn=concatenate,\n",
    "    feature_base_name=\"text-cv\",\n",
    "    embedding_fn=sklearn_embedding,\n",
    "    embedding_fn_kwargs={\"model\": tfidf_model},\n",
    ")\n"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Let's add the feature to the dataset:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2023-07-21 14:58:40 [INFO] There were unprocessed specs, computing...\n",
      "2023-07-21 14:58:40 [INFO] Processing 1 temporal features in parallel with 1 workers. Chunksize is 1. If this is above 1, it may take some time for the progress bar to move, as processing is batched. However, this makes for much faster total performance.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...\n",
      "To disable this warning, you can either:\n",
      "\t- Avoid using `tokenizers` before the fork if possible\n",
      "\t- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 1/1 [00:02<00:00,  2.89s/it]\n",
      "2023-07-21 14:58:43 [INFO] Checking alignment of dataframes - this might take a little while (~2 minutes for 1.000 dataframes with 2.000.000 rows).\n",
      "2023-07-21 14:58:43 [INFO] Starting concatenation. Will take some time on performant systems, e.g. 30s for 100 features and 2_000_000 prediction times. This is normal.\n",
      "2023-07-21 14:58:43 [INFO] Concatenation took 0.005 seconds\n",
      "2023-07-21 14:58:43 [INFO] Merging with original df\n"
     ]
    }
   ],
   "source": [
    "ts_flattener.add_spec(count_vectorizer_text_spec)\n",
    "df = ts_flattener.get_df()\n"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Let's subset to only see the prediction times that include text again."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>entity_id</th>\n",
       "      <th>timestamp</th>\n",
       "      <th>prediction_time_uuid</th>\n",
       "      <th>pred_text-st-0_within_730_days_concatenate_fallback_nan</th>\n",
       "      <th>pred_text-st-1_within_730_days_concatenate_fallback_nan</th>\n",
       "      <th>pred_text-st-2_within_730_days_concatenate_fallback_nan</th>\n",
       "      <th>pred_text-st-3_within_730_days_concatenate_fallback_nan</th>\n",
       "      <th>pred_text-st-4_within_730_days_concatenate_fallback_nan</th>\n",
       "      <th>pred_text-st-5_within_730_days_concatenate_fallback_nan</th>\n",
       "      <th>pred_text-st-6_within_730_days_concatenate_fallback_nan</th>\n",
       "      <th>...</th>\n",
       "      <th>pred_text-cv-and_within_730_days_concatenate_fallback_nan</th>\n",
       "      <th>pred_text-cv-for_within_730_days_concatenate_fallback_nan</th>\n",
       "      <th>pred_text-cv-in_within_730_days_concatenate_fallback_nan</th>\n",
       "      <th>pred_text-cv-of_within_730_days_concatenate_fallback_nan</th>\n",
       "      <th>pred_text-cv-or_within_730_days_concatenate_fallback_nan</th>\n",
       "      <th>pred_text-cv-patient_within_730_days_concatenate_fallback_nan</th>\n",
       "      <th>pred_text-cv-that_within_730_days_concatenate_fallback_nan</th>\n",
       "      <th>pred_text-cv-the_within_730_days_concatenate_fallback_nan</th>\n",
       "      <th>pred_text-cv-to_within_730_days_concatenate_fallback_nan</th>\n",
       "      <th>pred_text-cv-was_within_730_days_concatenate_fallback_nan</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>244</th>\n",
       "      <td>7337</td>\n",
       "      <td>1966-06-28 10:34:00</td>\n",
       "      <td>7337-1966-06-28-10-34-00</td>\n",
       "      <td>-0.032579</td>\n",
       "      <td>0.117177</td>\n",
       "      <td>-0.049458</td>\n",
       "      <td>0.009333</td>\n",
       "      <td>0.013606</td>\n",
       "      <td>0.021374</td>\n",
       "      <td>0.001354</td>\n",
       "      <td>...</td>\n",
       "      <td>4.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>16.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>2.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>755</th>\n",
       "      <td>8951</td>\n",
       "      <td>1969-12-22 16:32:00</td>\n",
       "      <td>8951-1969-12-22-16-32-00</td>\n",
       "      <td>-0.011282</td>\n",
       "      <td>0.002961</td>\n",
       "      <td>0.025957</td>\n",
       "      <td>-0.015063</td>\n",
       "      <td>-0.050311</td>\n",
       "      <td>0.048773</td>\n",
       "      <td>-0.002749</td>\n",
       "      <td>...</td>\n",
       "      <td>1.0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>8.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>896</th>\n",
       "      <td>2007</td>\n",
       "      <td>1968-10-15 14:12:00</td>\n",
       "      <td>2007-1968-10-15-14-12-00</td>\n",
       "      <td>-0.065502</td>\n",
       "      <td>0.026975</td>\n",
       "      <td>-0.042235</td>\n",
       "      <td>-0.012499</td>\n",
       "      <td>-0.012820</td>\n",
       "      <td>-0.003107</td>\n",
       "      <td>0.025823</td>\n",
       "      <td>...</td>\n",
       "      <td>4.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>6.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>13.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1517</th>\n",
       "      <td>1728</td>\n",
       "      <td>1968-05-29 12:27:00</td>\n",
       "      <td>1728-1968-05-29-12-27-00</td>\n",
       "      <td>0.003414</td>\n",
       "      <td>-0.022889</td>\n",
       "      <td>0.003017</td>\n",
       "      <td>0.036401</td>\n",
       "      <td>0.021559</td>\n",
       "      <td>-0.004627</td>\n",
       "      <td>0.070992</td>\n",
       "      <td>...</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>8.0</td>\n",
       "      <td>11.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>11.0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>2.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1917</th>\n",
       "      <td>4977</td>\n",
       "      <td>1968-11-28 16:05:00</td>\n",
       "      <td>4977-1968-11-28-16-05-00</td>\n",
       "      <td>0.029870</td>\n",
       "      <td>0.059029</td>\n",
       "      <td>0.025774</td>\n",
       "      <td>0.065304</td>\n",
       "      <td>0.001232</td>\n",
       "      <td>0.097216</td>\n",
       "      <td>0.005217</td>\n",
       "      <td>...</td>\n",
       "      <td>2.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>6.0</td>\n",
       "      <td>7.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>8.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 397 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      entity_id           timestamp      prediction_time_uuid  \\\n",
       "244        7337 1966-06-28 10:34:00  7337-1966-06-28-10-34-00   \n",
       "755        8951 1969-12-22 16:32:00  8951-1969-12-22-16-32-00   \n",
       "896        2007 1968-10-15 14:12:00  2007-1968-10-15-14-12-00   \n",
       "1517       1728 1968-05-29 12:27:00  1728-1968-05-29-12-27-00   \n",
       "1917       4977 1968-11-28 16:05:00  4977-1968-11-28-16-05-00   \n",
       "\n",
       "      pred_text-st-0_within_730_days_concatenate_fallback_nan  \\\n",
       "244                                           -0.032579         \n",
       "755                                           -0.011282         \n",
       "896                                           -0.065502         \n",
       "1517                                           0.003414         \n",
       "1917                                           0.029870         \n",
       "\n",
       "      pred_text-st-1_within_730_days_concatenate_fallback_nan  \\\n",
       "244                                            0.117177         \n",
       "755                                            0.002961         \n",
       "896                                            0.026975         \n",
       "1517                                          -0.022889         \n",
       "1917                                           0.059029         \n",
       "\n",
       "      pred_text-st-2_within_730_days_concatenate_fallback_nan  \\\n",
       "244                                           -0.049458         \n",
       "755                                            0.025957         \n",
       "896                                           -0.042235         \n",
       "1517                                           0.003017         \n",
       "1917                                           0.025774         \n",
       "\n",
       "      pred_text-st-3_within_730_days_concatenate_fallback_nan  \\\n",
       "244                                            0.009333         \n",
       "755                                           -0.015063         \n",
       "896                                           -0.012499         \n",
       "1517                                           0.036401         \n",
       "1917                                           0.065304         \n",
       "\n",
       "      pred_text-st-4_within_730_days_concatenate_fallback_nan  \\\n",
       "244                                            0.013606         \n",
       "755                                           -0.050311         \n",
       "896                                           -0.012820         \n",
       "1517                                           0.021559         \n",
       "1917                                           0.001232         \n",
       "\n",
       "      pred_text-st-5_within_730_days_concatenate_fallback_nan  \\\n",
       "244                                            0.021374         \n",
       "755                                            0.048773         \n",
       "896                                           -0.003107         \n",
       "1517                                          -0.004627         \n",
       "1917                                           0.097216         \n",
       "\n",
       "      pred_text-st-6_within_730_days_concatenate_fallback_nan  ...  \\\n",
       "244                                            0.001354        ...   \n",
       "755                                           -0.002749        ...   \n",
       "896                                            0.025823        ...   \n",
       "1517                                           0.070992        ...   \n",
       "1917                                           0.005217        ...   \n",
       "\n",
       "      pred_text-cv-and_within_730_days_concatenate_fallback_nan  \\\n",
       "244                                                 4.0           \n",
       "755                                                 1.0           \n",
       "896                                                 4.0           \n",
       "1517                                                1.0           \n",
       "1917                                                2.0           \n",
       "\n",
       "      pred_text-cv-for_within_730_days_concatenate_fallback_nan  \\\n",
       "244                                                 2.0           \n",
       "755                                                 5.0           \n",
       "896                                                 0.0           \n",
       "1517                                                1.0           \n",
       "1917                                                1.0           \n",
       "\n",
       "      pred_text-cv-in_within_730_days_concatenate_fallback_nan  \\\n",
       "244                                                 2.0          \n",
       "755                                                 1.0          \n",
       "896                                                 2.0          \n",
       "1517                                                8.0          \n",
       "1917                                                6.0          \n",
       "\n",
       "      pred_text-cv-of_within_730_days_concatenate_fallback_nan  \\\n",
       "244                                                 5.0          \n",
       "755                                                 1.0          \n",
       "896                                                 1.0          \n",
       "1517                                               11.0          \n",
       "1917                                                7.0          \n",
       "\n",
       "      pred_text-cv-or_within_730_days_concatenate_fallback_nan  \\\n",
       "244                                                 0.0          \n",
       "755                                                 1.0          \n",
       "896                                                 5.0          \n",
       "1517                                                0.0          \n",
       "1917                                                2.0          \n",
       "\n",
       "      pred_text-cv-patient_within_730_days_concatenate_fallback_nan  \\\n",
       "244                                                 3.0               \n",
       "755                                                 2.0               \n",
       "896                                                 6.0               \n",
       "1517                                                2.0               \n",
       "1917                                                2.0               \n",
       "\n",
       "      pred_text-cv-that_within_730_days_concatenate_fallback_nan  \\\n",
       "244                                                 1.0            \n",
       "755                                                 2.0            \n",
       "896                                                 2.0            \n",
       "1517                                                1.0            \n",
       "1917                                                1.0            \n",
       "\n",
       "      pred_text-cv-the_within_730_days_concatenate_fallback_nan  \\\n",
       "244                                                16.0           \n",
       "755                                                 8.0           \n",
       "896                                                13.0           \n",
       "1517                                               11.0           \n",
       "1917                                                8.0           \n",
       "\n",
       "      pred_text-cv-to_within_730_days_concatenate_fallback_nan  \\\n",
       "244                                                 4.0          \n",
       "755                                                 2.0          \n",
       "896                                                 3.0          \n",
       "1517                                                5.0          \n",
       "1917                                                4.0          \n",
       "\n",
       "      pred_text-cv-was_within_730_days_concatenate_fallback_nan  \n",
       "244                                                 2.0          \n",
       "755                                                 0.0          \n",
       "896                                                 0.0          \n",
       "1517                                                2.0          \n",
       "1917                                                1.0          \n",
       "\n",
       "[5 rows x 397 columns]"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_pred_times_with_text = df[\n",
    "    ~df[\"pred_text-st-1_within_730_days_concatenate_fallback_nan\"].isna()\n",
    "]\n",
    "df_pred_times_with_text.head()"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We can subset further to only include the features we created with the count vectorizer by subsetting to only include columns starting with the feature name (\"text-cv\")."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>pred_text-cv-and_within_730_days_concatenate_fallback_nan</th>\n",
       "      <th>pred_text-cv-for_within_730_days_concatenate_fallback_nan</th>\n",
       "      <th>pred_text-cv-in_within_730_days_concatenate_fallback_nan</th>\n",
       "      <th>pred_text-cv-of_within_730_days_concatenate_fallback_nan</th>\n",
       "      <th>pred_text-cv-or_within_730_days_concatenate_fallback_nan</th>\n",
       "      <th>pred_text-cv-patient_within_730_days_concatenate_fallback_nan</th>\n",
       "      <th>pred_text-cv-that_within_730_days_concatenate_fallback_nan</th>\n",
       "      <th>pred_text-cv-the_within_730_days_concatenate_fallback_nan</th>\n",
       "      <th>pred_text-cv-to_within_730_days_concatenate_fallback_nan</th>\n",
       "      <th>pred_text-cv-was_within_730_days_concatenate_fallback_nan</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>244</th>\n",
       "      <td>4.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>16.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>2.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>755</th>\n",
       "      <td>1.0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>8.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>896</th>\n",
       "      <td>4.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>6.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>13.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1517</th>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>8.0</td>\n",
       "      <td>11.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>11.0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>2.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1917</th>\n",
       "      <td>2.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>6.0</td>\n",
       "      <td>7.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>8.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      pred_text-cv-and_within_730_days_concatenate_fallback_nan  \\\n",
       "244                                                 4.0           \n",
       "755                                                 1.0           \n",
       "896                                                 4.0           \n",
       "1517                                                1.0           \n",
       "1917                                                2.0           \n",
       "\n",
       "      pred_text-cv-for_within_730_days_concatenate_fallback_nan  \\\n",
       "244                                                 2.0           \n",
       "755                                                 5.0           \n",
       "896                                                 0.0           \n",
       "1517                                                1.0           \n",
       "1917                                                1.0           \n",
       "\n",
       "      pred_text-cv-in_within_730_days_concatenate_fallback_nan  \\\n",
       "244                                                 2.0          \n",
       "755                                                 1.0          \n",
       "896                                                 2.0          \n",
       "1517                                                8.0          \n",
       "1917                                                6.0          \n",
       "\n",
       "      pred_text-cv-of_within_730_days_concatenate_fallback_nan  \\\n",
       "244                                                 5.0          \n",
       "755                                                 1.0          \n",
       "896                                                 1.0          \n",
       "1517                                               11.0          \n",
       "1917                                                7.0          \n",
       "\n",
       "      pred_text-cv-or_within_730_days_concatenate_fallback_nan  \\\n",
       "244                                                 0.0          \n",
       "755                                                 1.0          \n",
       "896                                                 5.0          \n",
       "1517                                                0.0          \n",
       "1917                                                2.0          \n",
       "\n",
       "      pred_text-cv-patient_within_730_days_concatenate_fallback_nan  \\\n",
       "244                                                 3.0               \n",
       "755                                                 2.0               \n",
       "896                                                 6.0               \n",
       "1517                                                2.0               \n",
       "1917                                                2.0               \n",
       "\n",
       "      pred_text-cv-that_within_730_days_concatenate_fallback_nan  \\\n",
       "244                                                 1.0            \n",
       "755                                                 2.0            \n",
       "896                                                 2.0            \n",
       "1517                                                1.0            \n",
       "1917                                                1.0            \n",
       "\n",
       "      pred_text-cv-the_within_730_days_concatenate_fallback_nan  \\\n",
       "244                                                16.0           \n",
       "755                                                 8.0           \n",
       "896                                                13.0           \n",
       "1517                                               11.0           \n",
       "1917                                                8.0           \n",
       "\n",
       "      pred_text-cv-to_within_730_days_concatenate_fallback_nan  \\\n",
       "244                                                 4.0          \n",
       "755                                                 2.0          \n",
       "896                                                 3.0          \n",
       "1517                                                5.0          \n",
       "1917                                                4.0          \n",
       "\n",
       "      pred_text-cv-was_within_730_days_concatenate_fallback_nan  \n",
       "244                                                 2.0          \n",
       "755                                                 0.0          \n",
       "896                                                 0.0          \n",
       "1517                                                2.0          \n",
       "1917                                                1.0          "
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_cv_pred_times_with_text = df_pred_times_with_text.loc[\n",
    "    :, df_pred_times_with_text.columns.str.startswith(\"pred_text-cv\")\n",
    "]\n",
    "df_cv_pred_times_with_text.head()"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Notice that the text column names are informative wrt. the word they count (e.g. and, for, in, etc.). This is because `sklearn_embedding` uses the `.get_feature_names` method of the sklearn model to set the column names."
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Writing your own text embedding function\n",
    "\n",
    "If you want to write your own embedding function, you simply need to write a function that takes a pd.Series of text as the first input and any number of optional keyword arguments. Let's write a small function to embed long texts using a Huggingface model. Note that this implementation will likely be quite slow. In most cases, the best thing to do would be to embed your data before passing to `timeseriesflattener` and following the procedure outlined in [Generating predictors from embedded text](#generating-predictors-from-embedded-text)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [],
   "source": [
    "from transformers import AutoTokenizer, AutoModel\n",
    "import pandas as pd\n",
    "import torch\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [],
   "source": [
    "def huggingface_long_text_embedding(\n",
    "    text_series: pd.Series, model_name: str, chunk_length: int\n",
    ") -> pd.DataFrame:\n",
    "    \"\"\"\n",
    "    Embeds text using a HuggingFace model, splitting the text into chunks of a\n",
    "    specified number of characters.\n",
    "\n",
    "    Args:\n",
    "        text_series: A pandas Series containing the text to be embedded.\n",
    "        model_name: The name of the HuggingFace model to use.\n",
    "        chunk_length: The number of characters to use in each chunk.\n",
    "\n",
    "    Returns:\n",
    "        A pandas DataFrame containing the embeddings.\n",
    "    \"\"\"\n",
    "    tokenizer = AutoTokenizer.from_pretrained(model_name)\n",
    "    model = AutoModel.from_pretrained(model_name)\n",
    "    model.eval()\n",
    "    embeddings = []\n",
    "    for text in text_series:\n",
    "        text_chunks = [\n",
    "            text[i : i + chunk_length] for i in range(0, len(text), chunk_length)\n",
    "        ]\n",
    "        tokenized = tokenizer(\n",
    "            text_chunks, padding=True, truncation=True, return_tensors=\"pt\"\n",
    "        )\n",
    "        with torch.no_grad():\n",
    "            output = model(**tokenized)\n",
    "        # take mean of all tokens in each chunk, then mean of all chunks\n",
    "        embeddings.append(output[0].mean(axis=1).mean(axis=0).cpu().numpy())\n",
    "    return pd.DataFrame(embeddings)"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The function can now be used as an embedding function in a `TextPredictorSpec` and used in the same manner as usual."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [],
   "source": [
    "huggingface_long_text_spec = TextPredictorSpec(\n",
    "    timeseries_df=load_synth_text(),\n",
    "    lookbehind_days=730,\n",
    "    fallback=np.nan,\n",
    "    aggregation_fn=concatenate,\n",
    "    feature_base_name=\"text-hf-long\",\n",
    "    embedding_fn=huggingface_long_text_embedding,\n",
    "    embedding_fn_kwargs={\n",
    "        \"model_name\": \"sentence-transformers/paraphrase-multilingual-MiniLM-L12-v2\",\n",
    "        \"chunk_length\": 256,\n",
    "    },\n",
    ")"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3.10.9 ('.venv': poetry)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.10"
  },
  "orig_nbformat": 4,
  "vscode": {
   "interpreter": {
    "hash": "9e85d6a49b1f06126f30ca9ae16ded22dd7c17d2dbfabea9098dc6424f12e12a"
   }
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
